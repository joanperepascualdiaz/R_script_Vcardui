rm(list=ls())
path_data = "/home/joanpere/Modelling_data/"
path_dat_nc = "/home/joanpere/Modelling_data/files_nc/"
path_data_prep = "/home/joanpere/Modelling_data/files_prep/"
path_LU = "/home/joanpere/Modelling_data/LU_prep/"
path_save = "/home/joanpere/Modelling_data/path_save/"
setwd(path_data)

### PACKAGES ###

library(xlsx)
library(ggplot2)
library(sp)
library(raster)
source("https://raw.githubusercontent.com/briatte/ggcorr/master/ggcorr.R")
library(corrplot)
library(ade4) ## pca
library(foreign) ## read dbf
library(rgdal)
library(ncdf4)
library(spThin)

##########################################################################################################
                                        ###GET RELEVES DATA###
##########################################################################################################

## PRESENCES ##

setwd(path_data)
tab_cardui = read.xlsx(file=paste0(path_data,"cardui_presence_v0.xlsx"),sheetName="Sheet1",header=T)

colnames(tab_cardui)

## CONVERT Larvae.numbers IN REAL NUMBERS FOR REPLICATION OF OCCURRENCE POINTS ##

tab_cardui$Larvae.numbers = sub("[>~?]","",tab_cardui$Larvae.numbers)
tab_cardui$Larvae.numbers[which(tab_cardui$Larvae.numbers %in% c(""))] = NA
tab_cardui$Larvae.numbers[which(tab_cardui$Larvae.numbers=="2 (but 100 empty shelters)")] = 100 #2
tab_cardui$Larvae.numbers[which(tab_cardui$Larvae.numbers=="20 (but  100 empty shelters)")] = 100 #20
tab_cardui$Larvae.numbers[which(tab_cardui$Larvae.numbers=="21000 adults + pupae+ 1 larva + oviposition")] = 1000 #NA
tab_cardui$Larvae.numbers[which(tab_cardui$Larvae.numbers=="oviposition")] = 1
tab_cardui$Larvae.numbers[which(tab_cardui$Larvae.numbers=="100-1000")] = 500
tab_cardui$Larvae.numbers[which(tab_cardui$Larvae.numbers=="Infestation")] = 500

tab_cardui$Larvae.numbers = as.numeric(tab_cardui$Larvae.numbers)
#tab_cardui$Lat = as.numeric(tab_cardui$Lat)
#tab_cardui$Long = as.numeric(tab_cardui$Long)

## SUBSET EUROPE ## [Do not run it]

head(tab_cardui)
tab_cardui_europe<-subset(tab_cardui, Region=="Europe")
head(tab_cardui_europe)

# SUBSET EUROPE SAMPLING BY MONTH # [Do not run it]

tab_cardui_europe_jan<-subset(tab_cardui_europe, Month==1)
tab_cardui_europe_feb<-subset(tab_cardui_europe, Month==2)
tab_cardui_europe_mar<-subset(tab_cardui_europe, Month==3)
tab_cardui_europe_apr<-subset(tab_cardui_europe, Month==4)
tab_cardui_europe_may<-subset(tab_cardui_europe, Month==5)
tab_cardui_europe_jun<-subset(tab_cardui_europe, Month==6)
tab_cardui_europe_jul<-subset(tab_cardui_europe, Month==7)
tab_cardui_europe_aug<-subset(tab_cardui_europe, Month==8)
tab_cardui_europe_sep<-subset(tab_cardui_europe, Month==9)
tab_cardui_europe_oct<-subset(tab_cardui_europe, Month==10)
tab_cardui_europe_nov<-subset(tab_cardui_europe, Month==11)
tab_cardui_europe_dec<-subset(tab_cardui_europe, Month==12)

# DISTRIBUTION OF OUR DATA WITH BARPLOTS # [Do not run it]

barplot(table(tab_cardui_europe_jan$Year),las=2)
barplot(table(tab_cardui_europe_feb$Year),las=2)
barplot(table(tab_cardui_europe_mar$Year),las=2)
barplot(table(tab_cardui_europe_apr$Year),las=2)
barplot(table(tab_cardui_europe_may$Year),las=2)
barplot(table(tab_cardui_europe_jun$Year),las=2)
barplot(table(tab_cardui_europe_jul$Year),las=2)
barplot(table(tab_cardui_europe_aug$Year),las=2)
barplot(table(tab_cardui_europe_sep$Year),las=2)
barplot(table(tab_cardui_europe_oct$Year),las=2)
barplot(table(tab_cardui_europe_nov$Year),las=2)
barplot(table(tab_cardui_europe_dec$Year),las=2)

# EXPLORE SAMPLING REPARTITION #

tmp_day = as.numeric(as.character(tab_cardui$Day))
barplot(table(tmp_day))
barplot(table(tab_cardui$Month))
barplot(table(tab_cardui$Year),las=2)
barplot(table(tab_cardui$Country),las=2)

tab_melt = data.frame(Day=tmp_day,Month=tab_cardui$Month,Year=tab_cardui$Year)
ggplot(tab_melt,aes(factor(Year),fill=factor(Month))) +
  geom_bar()
table(tab_melt$Year,tab_melt$Month)

# SAVE COORDINATES FOR ALL RELEVES #

XY_PRES = tab_cardui[,c("Lat","Long","Month","Larvae.numbers")]
save(XY,file="XY_WGS84")

## ABSENCES ##

tab_cardui_abs = read.xlsx(file=paste0(path_data,"/cardui_larvae_absences_20170519.xlsx"),sheetName="Sheet1",header=T)
colnames(tab_cardui_abs)

# RANDOMIZE ABSENCES #

tab_cardui_abs$Year = sample(1975:2018,nrow(tab_cardui_abs),replace=T)

## SAVE COORDINATES FOR ALL ABSENCES ##

XY_ABS = tab_cardui_abs[,c("Lat","Long","Month")]
save(XY_ABS,file="XY_WGS84_ABS")

##########################################################################################################
                                        ###GET CLIMATIC DATA###
##########################################################################################################

## BUILDING LAYERS FROM NC_FILES ##

vars_clim = c("cld", "dtr", "frs", "pet", "pre", "tmn", "tmp", "tmx", "vap", "wet")
#vars_clim = c("pre", "tmp", "vap", "wet", "frs")
periods = c("1971.1980","1981.1990","1991.2000","2001.2010","2011.2020")
combi = as.vector(sapply(1971:2020,function(x) paste0(x,".",c(paste0("0",1:9),10:12))))

for(vari in vars_clim){
  cat("\n ========> VARIABLE ",vari, "<======== \n")
  eval(parse(text=paste0("ras_",vari," = brick()")))
  for(period in periods){
    cat(" ",period)
    ## Load data and cut it to the right extent
    ras = brick(paste0("/home/joanpere/Modelling_data/files_nc/cru_ts4.05.",period,".",vari,".dat.nc"))
    ras = crop(ras,extent(-20,60,-5,70))
    NAvalue(ras)<- -9999

    ## Keep only layers wanted
    tmp_names = strtrim(sub("X","",names(ras)),7)
    ras = ras[[which(tmp_names %in% combi)]]

    ## Incorporte into the variable stack
    eval(parse(text=paste0("ras_",vari," = addLayer(ras_",vari,",ras)")))
  }
  eval(parse(text=paste0("save(ras_",vari,",file='/home/joanpere/Modelling_data/files_prep/ras_",vari,"')")))
  eval(parse(text=paste0("writeRaster(ras_",vari,",filename='/home/joanpere/Modelling_data/files_prep/ras_",vari,".img',format='ascii', bylayer=TRUE, suffix='names', overwrite=TRUE)")))
}

## GET CLIMATIC DATA BY MONTH ##

for(vari in vars_clim){
  cat("\n ========> VARIABLE ",vari, "<======== \n")

  ## Load file by variable with all dates
  eval(parse(text=paste0("load(file='/home/joanpere/Modelling_data/files_prep/ras_",vari,"')")))
  eval(parse(text=paste0("names(ras_",vari,") = gsub('[.]','_',names(ras_",vari,"))")))

  ## Aggregate over all months and years (mean)
  for(mm in c(paste0('0',1:9),'10','11','12')){
    eval(parse(text=paste0("ras_",vari,"_",mm," = mean(ras_",vari,"[[grep('_",mm,"_',names(ras_",vari,"))]],na.rm=T)")))
    eval(parse(text=paste0("save(ras_",vari,"_",mm,",file='/home/joanpere/Modelling_data/files_prep/ras_",vari,"_",mm,"')")))
  }
}

## CREATE A MASK OF THE STUDIED AREA ##

for(vari in vars_clim){
  load(paste0("/home/joanpere/Modelling_data/prep/ras_",vari))
}

eval(parse(text=paste0("mask = ",paste0("ras_",vars_clim,"[[1]]",collapse="+"))))
mask[which(!is.na(mask[]))] = 1
names(mask) = "mask"
plot(mask)
save(mask, file = "mask.pdf")
writeRaster(mask,filename="MASK.img",overwrite=T)

## CREATE MASK FOR EACH LAND USE TYPE WITH PROPORTION WITHIN EACH PIXEL ##

mask = raster("MASK.img")
ind_notNA = which(!is.na(mask[]))
LU_proportion = read.dbf("tabulate_prct.dbf")
type_LU = colnames(LU_proportion)[-1]
head(LU_proportion)

## ---------- It is important to perform this analysing the whole climatic dataset ---------- ##

pdf("Maps_LU.pdf")
for(lu in type_LU){
  tmp = mask
  tmp[ind_notNA] = LU_proportion[,lu]
  plot(tmp,main=lu)
  save(tmp,file=paste0("/home/joanpere/Modelling_data/ras_LU/ras_LU_",lu))
}
dev.off()

## GATHER LU INTO THREE CATEGORIES: OPEN, CLOSED AND BARELAND ##

open_LU = paste0("VALUE_",c(11,14,20,30,60,90,110,120,130,140,150,180,190))
closed_LU = paste0("VALUE_",c(40,50,70,100,160,170))
bareland_LU = paste0("VALUE_",200)

for(new_cat in c("open","closed","bareland")){
  tmp = mask
  tmp[ind_notNA] = rowSums(LU_proportion[,get(paste0(new_cat,"_LU")),drop=F],na.rm=T)
  plot(tmp,main=new_cat)
  assign(paste0("ras_",new_cat),tmp)
  eval(parse(text=paste0("save(ras_",new_cat,",file='/home/joanpere/Modelling_data/LU_prep/ras_LU_",new_cat,"')")))
  # eval(parse(text=paste0("writeRaster(ras_",new_cat,",filename='/home/joanpere/Modelling_data/LU_prep/ras_LU_",new_cat,"')")))
}

##########################################################################################################
                                     ###PLOT PRESENCE & ABSENCES###
##########################################################################################################

## PLOT RELEVES BY MONTH ##

XY_months = split(XY[,c("Long","Lat")],XY$Month)
pdf("Maps_by_month.pdf")
for(mm in 1:12){
  plot(mask,col="grey50",legend=F,main=names_months[mm])
  points(XY_months[[mm]],pch="+")
}
dev.off()


##########################################################################################################
                                        ###GATHER CLIMATE & XY###
##########################################################################################################

## This table will not be used after the calculation of PPM models. It is for now computed to have a look at
## correlations between variables for the points sampled and for BioMOD2

INPUT = data.frame(X = tab_cardui$Long..Dec.Deg.,
                   Y = tab_cardui$Lat..Dec.Deg.,
                   date = paste(tab_cardui$Year,sapply(paste0("0",tab_cardui$Month),function(x)
                     paste0(tail(strsplit(x,"")[[1]],2),collapse="")),sep="."),
                   YEAR = tab_cardui$Year,
                   MONTH = tab_cardui$Month,
                   LARV_NB = tab_cardui$Larvae.numbers)

INPUT = rbind(INPUT, data.frame(X = tab_cardui_abs$Long..Dec.Deg.,
                                Y = tab_cardui_abs$Lat..Dec.Deg.,
                                date = paste(tab_cardui_abs$Year,sapply(paste0("0",tab_cardui_abs$Month),function(x)
                                  paste0(tail(strsplit(x,"")[[1]],2),collapse="")),sep="."),
                                YEAR = tab_cardui_abs$Year,
                                MONTH = tab_cardui_abs$Month,
                                LARV_NB = 0))

## FOR EACH COORDINATES SAMPLED, GET THE CORRESPONDING VALUES OF EACH VARIABLE ##

for(vari in vars_clim){
  cat("\n ========> VARIABLE ",vari, "<======== \n")
  eval(parse(text=paste0("INPUT$",vari," = NA")))
  eval(parse(text=paste0("tmp_names = strtrim(sub('X','',names(ras_",vari,")),7)")))
  for(i in 1:nrow(INPUT)){
    if(length(which(tmp_names==INPUT$date[i]))>0)
      eval(parse(text=paste0("INPUT$",vari,"[i] = extract(ras_",vari,",INPUT[i,c('X','Y')],layer=which(tmp_names==INPUT$date[i]),nl=1)")))
  }
}
for(vari in c("open","closed","bareland")){
  eval(parse(text=paste0("INPUT$",vari," = extract(ras_",vari,",INPUT[,c('X','Y')])")))
  eval(parse(text=paste0("INPUT$",vari,"[which(is.na(INPUT$",vari,"))] = 0")))
}
summary(INPUT)
save(INPUT,file="INPUT")

##########################################################################################################
                                 ### EXPLORE FUTURE CLIMATE & LU DATA ###
##########################################################################################################



##########################################################################################################
                                  ###EXPLORE CLIMATE DATA FOR RELEVES###
##########################################################################################################

mask = raster("MASK.img")
plot(mask)
ind_notNA = which(!is.na(mask[]))

vars_clim = c("pre","tmp","vap","wet","frs")
vars_LU = c("open","closed","bareland")
vars = c(vars_clim,vars_LU)
num_months = c(paste0('0',1:9),'10','11','12')

## GET CLIMATIC VARIABLES BY MONTH ##

for(vari in vars_clim){
  for(mm in num_months){
    eval(parse(text=paste0("load(file='/home/joanpere/Modelling_data/prep/ras_",vari,"_",mm,"')")))
  }
}

## GET LU BY MONTH ##

for(vari in vars_LU){
  eval(parse(text=paste0("load(file='/home/joanpere/Modelling_data/ras_LU/ras_LU_",vari,"')")))
  for(mm in num_months){
    eval(parse(text=paste0("ras_",vari,"_",mm," = ras_",vari)))
  }
}

eval(parse(text=paste0("STK = stack(list(",paste0('ras_',vars,'_06',collapse=","),"))")))
names(STK) = vars
STK = as.data.frame(STK)
STK = STK[ind_notNA,]

input = STK

## CORRELATIONS AND PRINCIPAL COMPONENT ANALYSIS ##

## Correlations ##

ggcorr(input)
corr = cor(input)
diag(corr) = NA
corr[which(corr>(-0.8) & corr<0.8)] = NA
(corr)

## Principal Component Analysis ##

acp = dudi.pca(input,scannf=F,nf=2)
s.corcircle(acp$co)

##########################################################################################################
                                  ###BIOMOD2 PRESENT AND PAST DATA###
##########################################################################################################

num_months = c(paste0('0',1:9),'10','11','12')
names_months = c("January","February","March","April","May","June","July","August","September","October","November","December")
vars_LU = c("closed","bareland", "open")
vars_clim = c("cld", "dtr", "frs", "pet", "pre", "tmn", "tmp", "tmx", "vap", "wet")
vars = c(vars_clim,vars_LU)

#pointSelected = "occ"
pointSelected = "occRep"

## LOAD RELEVES COORDINATES AND SPLIT THEM BY MONTH ##

load("INPUT")
INPUT$LARV_NB[which(is.na(INPUT$LARV_NB))] = 1
if(pointSelected=="occRep"){
  tmp = list()
  for(i in 1:nrow(INPUT)){
    if(INPUT$LARV_NB[i]>0){
      tmp[[i]] = INPUT[rep(i,INPUT$LARV_NB[i]),]
    }
    if(INPUT$LARV_NB[i]==0){
      tmp[[i]] = INPUT[i,]
    }
  }
  INPUT = do.call(rbind,tmp)
}

## GET CLIMATIC VARIABLES BY MONTH ##

for(vari in vars_clim){
  for(mm in num_months){
    eval(parse(text=paste0("load(file='/home/joanpere/Modelling_data/prep/ras_",vari,"_",mm,"')")))
  }
}

## GET LU BY MONTH ##

for(vari in vars_LU){
  eval(parse(text=paste0("load(file='/home/joanpere/Modelling_data/LU_prep/ras_LU_",vari,"')")))
  for(mm in num_months){
    eval(parse(text=paste0("ras_",vari,"_",mm," = ras_",vari)))
  }
}

## GATHER VARIABLES BY MONTH (list size 12, and with each : all variables in im format) ##

all.env = list()
for(mm in num_months){
  list_var = paste0("ras_",vars,"_",mm, collapse=" , ")
  eval(parse(text=paste0("STK = stack(list(",list_var,"))")))
  names(STK) = vars
  all.env[[mm]] = STK
}

### RUN BIOMOD2 ###

library(biomod2)

check.computed = T
nrep = 2
setwd(path_save)

sp.name = paste0("CARDUI.",pointSelected)
sp.occ = ifelse(INPUT$LARV_NB>0, 1, 0)
xy <- INPUT[,c("X","Y")]

## FORMATING DATA FOR BIOMOD2 --------------------------- ##

bm.form <- BIOMOD_FormatingData(resp.var = sp.occ,
                                expl.var = INPUT[,vars],
                                resp.xy = xy,
                                resp.name = sp.name)
(bm.form)

## DEFINE MODELS OPTIONS -------------------------------- ##

bm.opt <- BIOMOD_ModelingOptions(GLM=list(type="polynomial",test="AIC"), GBM=list(n.trees=3000), GAM=list(k=4))

## RUN SINGLE MODELS ------------------------------------ ##

if(check.computed){
  bm.mod.file <- list.files(paste0(path_save, sp.name), pattern = "mod1.models.out$", full.names = TRUE)
  bm.em.file <- list.files(paste0(path_save, sp.name), pattern = "ensemble.models.out$", full.names = TRUE)
  bm.ef.file <- list.files(paste0(path_save, sp.name, "/proj_Cardui_January"), pattern = "ensemble.projection.out$", full.names = TRUE)
} else {
  bm.mod.file <- bm.em.file <- bm.ef.file <- NULL
}

if(check.computed & length(bm.mod.file)){
  cat("\n loading previous version of bm.mod..")
  bm.mod <- get(load(bm.mod.file))
} else {
  bm.mod <- BIOMOD_Modeling(data = bm.form,
                            models = c('RF', 'MARS', 'GLM', 'GAM', 'GBM'),
                            models.options = bm.opt,
                            NbRunEval = nrep,
                            DataSplit = 70,
                            Prevalence = 0.5,
                            VarImport = 5,
                            models.eval.meth = c('TSS','ROC'),
                            do.full.models = FALSE,
                            modeling.id = 'mod1')
}

## RUN ENSEMBLE MODELS ---------------------------------- ##

if(check.computed & length(bm.em.file)){
  cat("\n loading previous version of bm.em..")
  bm.em <- get(load(bm.em.file))
} else {
  bm.em <- BIOMOD_EnsembleModeling(modeling.output = bm.mod,
                                   chosen.models = "all",
                                   em.by = "all",
                                   eval.metric = c('TSS'),
                                   eval.metric.quality.threshold = 0.35,
                                   models.eval.meth = c('TSS', 'ROC'),
                                   prob.mean = FALSE,
                                   prob.mean.weight = TRUE,
                                   prob.mean.weight.decay = 'proportional',
                                   committee.averaging = TRUE)
}

## PROJECT ENSEMBLE MODELS ------------------------------ ##

if(check.computed & length(bm.ef.file)){
  cat("\n loading previous version of bm.ef..")
  bm.ef <- get(load(bm.ef.file))
} else{
  for(mm in num_months){
    bm.ef <- BIOMOD_EnsembleForecasting(EM.output = bm.em,
                                        new.env = all.env[[mm]],
                                        output.format = ".img",
                                        proj.name = paste0("CARDUI_",mm),
                                        selected.models="all",
                                        binary.meth=c('TSS'))
  }
}

## GET VARIABLE IMPORTANCE ##

varImp = get_variables_importance(bm.mod)

## GET MODELS EVALUATION ##

modEval = get_evaluations(bm.mod)

## GET DENSITY PLOTS ##

# 1.1. Load the models which we want to extract the predicted response curves #

myGLMs <- BIOMOD_LoadModels(bm.mod, models='GLM')


# 1.2. Plot 2D response plots #

pdf("response_curves.pdf")
myRespPlot2D <- response.plot2(models  = myGLMs,
                               Data = get_formal_data(bm.mod,'expl.var'),
                               show.variables= get_formal_data(bm.mod,'expl.var.names'),
                               do.bivariate = FALSE,
                               fixed.var.metric = 'median',
                               col = c("blue", "red"),
                               legend = TRUE,
                               data_species = get_formal_data(bm.mod,'resp.var'))
dev.off()

# 2.1. Load the models which we want to extract the predicted response curves #

myEns <- BIOMOD_LoadModels(bm.em)

# 2.2. Plot 2D response plots #

setwd(path_save)

myEns = c("CARDUI.occRep_EMcaByTSS_mergedAlgo_mergedRun_mergedData", "CARDUI.occRep_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData")

load("CARDUI.occRep/models/mod1/CARDUI.occRep_EMcaByTSS_mergedAlgo_mergedRun_mergedData")
load("CARDUI.occRep/models/mod1/CARDUI.occRep_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData")

bm.em = get(load("CARDUI.occRep/CARDUI.occRep.mod1ensemble.models.out"))

form.data = get(load("CARDUI.occRep/.BIOMOD_DATA/mod1/formated.input.data"))

pdf("responseplot.pdf")
myRespPlot2D <- response.plot2(models = myEns,
                               Data = form.data@data.env.var,
                               show.variables= colnames(form.data@data.env.var),
                               do.bivariate = FALSE,
                               fixed.var.metric = 'median',
                               col = c("blue", "red"),
                               plot = TRUE,
                               legend = TRUE,
                               data_species = form.data@data.species)

dev.off()
dim(myRespPlot2D)
dimnames(myRespPlot2D)

## GET RASTER MAPS##

setwd(path_save)

pdf(paste0(path_save,"RasterMaps_Cardui_SDM_EMca_Test4_",pointSelected,".pdf"))
for(mm in num_months){
  #color=c("grey","grey","grey","yellow","yellow","yellow","yellow","green","green") #and color representation
  nam_file = paste0(path_save,sp.name,"/proj_CARDUI_",mm,"/individual_projections/",sp.name,"_EMcaByTSS_mergedAlgo_mergedRun_mergedData.img")
  if(file.exists(nam_file)){
    ras = raster(nam_file)
    plot(ras,main=mm,zlim=c(0,1000))#,col=color)
  }
}
dev.off()


pdf(paste0(path_save,"RasterMaps_Cardui_SDM_EMwmean_Test4_",pointSelected,".pdf"))
for(mm in num_months){
  nam_file = paste0(path_save,sp.name,"/proj_CARDUI_",mm,"/individual_projections/",sp.name,"_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData.img")
  if(file.exists(nam_file)){
    ras = raster(nam_file)
    plot(ras,main=mm,zlim=c(0,1000))
  }
}
dev.off()

## GET RASTER MAPS WITH HIGHPROBS ##

pdf(paste0(path_save,"RasterMaps_Cardui_SDM_EMca_",pointSelected,"_highprobs.pdf"))
for(mm in num_months){
  color=c("grey","grey","grey","grey","grey","grey","yellow","red") #and color representation
  nam_file = paste0(path_save,sp.name,"/proj_CARDUI_",mm,"/individual_projections/",sp.name,"_EMcaByTSS_mergedAlgo_mergedRun_mergedData.img")
  if(file.exists(nam_file)){
    ras = raster(nam_file)
    plot(ras,main=mm,zlim=c(0,1000),col=color)
  }
}
dev.off()

pdf(paste0(path_save,"RasterMaps_Cardui_SDM_EMwmean_",pointSelected,"_highprobs.pdf"))
for(mm in num_months){
  nam_file = paste0(path_save,sp.name,"/proj_CARDUI_",mm,"/individual_projections/",sp.name,"_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData.img")
  if(file.exists(nam_file)){
    ras = raster(nam_file)
    plot(ras,main=mm,zlim=c(0,1000),col=color)
  }
}
dev.off()

pdf(paste0(path_save,"RasterMaps_Cardui_SDM_EMmean_",pointSelected,"_highprobs.pdf"))
for(mm in num_months){
  nam_file = paste0(path_save,sp.name,"/proj_CARDUI_",mm,"/individual_projections/",sp.name,"_EMmeanByTSS_mergedAlgo_mergedRun_mergedData.img")
  if(file.exists(nam_file)){
    ras = raster(nam_file)
    plot(ras,main=mm,zlim=c(0,1000),col=color)
  }
}
dev.off()

## GET RASTER MAPS ENSEMBLE ##

setwd(path_save)

pdf(paste0(path_figs,"RasterMaps_Cardui_SDM_EM",pointSelected,".pdf"))
for(mm in num_months){
  #color=c("grey","grey","grey","yellow","yellow","yellow","yellow","green","green") #and color representation
  nam_file = paste0(path_save,sp.name,"/proj_CARDUI_",mm,"/proj_CARDUI_",mm,"_",sp.name,"_ensemble.img")
  if(file.exists(nam_file)){
    ras = raster(nam_file)
    plot(ras,main=mm,zlim=c(0,1000))#,col=color)
  }
}
dev.off()

## GET RASTER MAPS WITH HIGHPROBS ENSEMBLE ##

setwd(path_save)

pdf(paste0(path_figs,"RasterMaps_Cardui_SDM_EM",pointSelected,"_highprobs.pdf"))
for(mm in num_months){
  color=c("grey","grey","grey","grey","grey","grey","yellow","red") #and color representation
  nam_file = paste0(path_save,sp.name,"/proj_CARDUI_",mm,"/proj_CARDUI_",mm,"_",sp.name,"_ensemble.img")
  if(file.exists(nam_file)){
    ras = raster(nam_file)
    plot(ras,main=mm,zlim=c(0,1000),col=color)
  }
}
dev.off()
